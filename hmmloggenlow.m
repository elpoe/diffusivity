function [out]=hmmloggenlow(obs,ksmall,k,dt,Dmin,Dmax)

%obs=load('randomdata.txt'); - load generated steps

states=10; %number of states
N=length(obs); %number of steps
P0=zeros(states,1); 
P0(:)=deal(1/states); %uniform initial state

%% A transition rate matrix is generated below. The first matrix generated, Kbig, generates the bias towards lower 
%% diffusivity states
kvecbig=zeros(1,states);
kvecbig(1)=-k;
kvecbig(2)=k;
kaltbig=zeros(1,states);
kaltbig(end)=-k;
Kbig=zeros(states,states);
for i=1:states
    if i==1
        Kbig(i,:)=-1*circshift(kaltbig,2);
    elseif i==states
        Kbig(i,:)=kaltbig;
    else
    Kbig(i,:)=circshift(kvecbig,i-1);
    end
end

%The tridiagonal, Ksmall, contains transition rates for transition to nearest neighbours, with reflexive boundary conditions.
kvecsmall=zeros(1,states);
kvecsmall(1)=-2*ksmall;
kvecsmall(2)=ksmall;
kvecsmall(end)=ksmall;
kaltsmall=zeros(1,states);
kaltsmall(1)=-ksmall;
kaltsmall(2)=ksmall;

Ksmall=zeros(states,states);
for i=1:states
    if i==1
       Ksmall(i,:)=kaltsmall;
    elseif i==states
       kaltsmall2=-1*circshift(kaltsmall,states-2);
       Ksmall(i,:)=kaltsmall2;
    else 
    Ksmall(i,:)=circshift(kvecsmall,i-1);
    end
end

K=Ksmall+Kbig;

%%

TRANS=abs(expm(K*dt)); %Transitionmatrix is generated by the matrix exponentiation of the total transition rate matrix K

Dvec=linspace(Dmin,Dmax,states)'; %the diffusion coefficients are evenly spaced between Dmin and Dmax

z=4*dt;
z1=pi*z;

gen=@(x,D) -dot(x,x)./(z.*D)-log(z1.*D); %general 2D brownian motion without drift
genD=@(x) gen(x,Dvec(:)); %general 2D brownian motion without drift, with the different diffusion values as input

TRNSLOG=log(TRANS'); %log to transposed transition matrix

frwrd=log(zeros(states,N+1)); %frwrd will contain all calculations for each time step

 
for i=1:states
    frwrd(i,1)=log(P0(i)); %it is assumed that the particle starts in any of the diffusivity states with equal probability
end

for n=2:N+1
    for i=1:states
 
        frwrd(i,n)=util_logsumexp(frwrd(:,n-1)+TRNSLOG(:,i)+genD(obs(n-1,:)));
 
    end
end
out=util_logsumexp(frwrd(:,N+1)); %the final result is the probability of the observations given the input parameters
end
